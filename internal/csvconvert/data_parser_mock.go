// Code generated by mockery v1.0.0. DO NOT EDIT.

package csvconvert

import (
	io "io"
	url "net/url"

	mock "github.com/stretchr/testify/mock"
)

// mockDataParser is an autogenerated mock type for the dataParser type
type mockDataParser struct {
	mock.Mock
}

// newReader provides a mock function with given fields: r
func (_m *mockDataParser) newReader(r io.Reader) ([][]string, error) {
	ret := _m.Called(r)

	var r0 [][]string
	if rf, ok := ret.Get(0).(func(io.Reader) [][]string); ok {
		r0 = rf(r)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([][]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(r)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// parseFloat provides a mock function with given fields: s, bitSize
func (_m *mockDataParser) parseFloat(s string, bitSize int) (float64, error) {
	ret := _m.Called(s, bitSize)

	var r0 float64
	if rf, ok := ret.Get(0).(func(string, int) float64); ok {
		r0 = rf(s, bitSize)
	} else {
		r0 = ret.Get(0).(float64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(s, bitSize)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// parseRequestURI provides a mock function with given fields: rawURL
func (_m *mockDataParser) parseRequestURI(rawURL string) (*url.URL, error) {
	ret := _m.Called(rawURL)

	var r0 *url.URL
	if rf, ok := ret.Get(0).(func(string) *url.URL); ok {
		r0 = rf(rawURL)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*url.URL)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(rawURL)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
